#######################################################
#
# Test add a named versioned package
#
#######################################################

body common control
{
    inputs => {
#               "../default.cf.sub",
               "../../../lib/3.6/packages.cf",
               "../../../lib/3.6/paths.cf",
              };
    bundlesequence  => { "init","test","check", };
    version => "1.0";
}




#######################################################

bundle agent init
{
    vars:
        "name" string => "test-package-charlie";

    packages:
        "$(name)"
        package_policy => "delete";
}

#######################################################

bundle agent test
{
    vars:
        "name" string => "$(init.name)";

      debian::
          "arch" string => "amd64";
          "version" string => "1.0-1";
      redhat::
          "arch" string => "x86_64";
          "version" string => "1.0-1";


    packages:

        debian::
            "$(name)"
            package_policy => "add",
            package_select => "==",
            package_version => "$(version)",
            package_architectures => { "$(arch)" },
            package_method => apt_get,
            classes => test_set_class("pass","fail");

        redhat::
            "$(name)"
            package_policy => "add",
            package_select => "==",
            package_version => "$(version)",
            package_architectures => { "$(arch)" },
            package_method => yum_rpm,
            classes => test_set_class("pass","fail");
}



body classes test_set_class(ok_class,notok_class)
{
    promise_kept => { "$(ok_class)" };
    promise_repaired => { "$(ok_class)" };
    repair_failed => { "$(notok_class)" };
}

#######################################################

bundle agent check
{

    classes:

        debian::
            "has_pkg" expression => returnszero("dpkg -l | grep ' $(test.name) ' > /dev/null", "useshell");

        redhat::
            "has_pkg" expression => returnszero("/bin/rpm -q $(test.name) > /dev/null", "useshell");

        any::
            "has_file" expression => fileexists("/test-package-charlie-installed.txt");
            "ok" expression => "pass.!fail.has_pkg.has_file";

    reports:
      ok::
        "$(this.promise_filename) Pass";
      !ok::
        "$(this.promise_filename) FAIL";
}

body classes succesfully_executed(class)
{
    kept_returncodes => { "0" };
    promise_kept => { "$(class)" };
}


