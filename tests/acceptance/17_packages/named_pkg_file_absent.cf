#######################################################
#
# Test removal of package that is in a local repository
#
#######################################################

body common control
{
    inputs => {
               "../../../lib/3.6/packages.cf",
               "../../../lib/3.6/paths.cf",
              };
    # bundlesequence  => { "g", "G", default("$(this.promise_filename)") };
    bundlesequence  => { "init", "test", "check" };
    version => "1.0";
}



#######################################################

bundle agent init
{
    vars:
        "name" string => "test-package-charlie";
}

#######################################################

bundle agent test
{
    vars:
        "name" string => "$(init.name)";

        debian::
            "version" string => "1.0-1";

        redhat::
            "version" string => "1.0-1";

    packages:

        debian::
            "$(name)"
            package_policy => "delete",
            package_select => "==",
            package_version => "$(version)",
            package_architectures => { "i386", "amd64" },
            package_method => dpkg_version("/tmp");
        redhat::
            "$(name)"
            package_policy => "delete",
            package_select => "==",
            package_version => "$(version)",
            package_architectures => { "i386", "x86_64" },
            package_method => rpm_version("/tmp");

}



body classes test_set_class(ok_class,notok_class)
{
    promise_kept => { "$(ok_class)" };
    promise_repaired => { "$(ok_class)" };
    repair_failed => { "$(notok_class)" };
}

#######################################################

bundle agent check
{

    classes:

        debian::
            "not_has_pkg" not => returnszero("dpkg -l $(test.name) > /dev/null", "useshell");

        redhat::
            "not_has_pkg" not => returnszero("/bin/rpm -q $(test.name) > /dev/null", "useshell");

        any::
            "not_has_file" not => fileexists("/test-package-charlie-installed.txt");
            "ok" expression => "pass.!fail.not_has_pkg.not_has_file";

    reports:
      ok::
        "$(this.promise_filename) $(test.name)=$(test.version)  Pass";
      !ok::
        "$(this.promise_filename) FAIL";
}

body classes succesfully_executed(class)
{
    kept_returncodes => { "0" };
    promise_kept => { "$(class)" };
}



