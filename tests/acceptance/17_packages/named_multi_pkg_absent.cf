#######################################################
#
# Test remove multiple packages
#
#######################################################

body common control
{
    inputs => { 
               "../default.cf.sub",
               "../../../libraries/cfengine_stdlib.cf",
              };
    bundlesequence  => { default("$(this.promise_filename)") };
    version => "1.0";
}



#######################################################

bundle agent init
{
    vars:
        "name" slist => { "test-package-charlie","test-package-alpha","test-package-beta"};

    packages:
    
        debian::
        
            "$(name)"
            package_policy => "add",
            package_method => apt_get;
            
        redhat::
        
            "$(name)"
            package_policy => "add",
            package_method => yum_rpm;
}

#######################################################

bundle agent test
{
    vars:
        "name" slist => { @(init.name) };
      

    packages:
    
        debian::
        
            "$(name)"
            package_policy => "delete",
            package_method => apt_get,
            classes => test_set_class("pass_$(name)","fail_$(name)");
          
        redhat::
        
            "$(name)"
            package_policy => "delete",
            package_method => yum_rpm,
            classes => test_set_class("pass_$(name)","fail_$(name)");
      
}



body classes test_set_class(ok_class,notok_class)
{
        promise_kept => { "$(ok_class)" };
        promise_repaired => { "$(ok_class)" };
        repair_failed => { "$(notok_class)" };
}

#######################################################

bundle agent check
{

    classes:
    
        debian::
        
            "not_has_pkg_$(test.name)" not => returnszero("dpkg -l $(test.name) > /dev/null", "useshell");
            
        redhat::
        
            "not_has_pkg_$(test.name)" not => returnszero("/bin/rpm -q $(test.name) > /dev/null", "useshell");
        
        any::
            "not_has_file_test_package_charlie" not => fileexists("/test-package-charlie-installed.txt");
            "not_has_file_test_package_alpha" not => fileexists("/test-package-alpha-installed.txt");
            "not_has_file_test_package_beta" not => fileexists("/test-package-beta-installed.txt");
            # Would be nice to test the pass_* and fail_* classes here, but CFEngine
            # doesn't set the classes properly when installing multiple new packages.
            "charlie_ok" and => { #"pass_test_package_charlie", "!fail_test_package_charlie",
                               "not_has_pkg_test_package_charlie", "not_has_file_test_package_charlie" };
            "alpha_ok" and => { #"pass_test_package_alpha", "!fail_test_package_alpha",
                                "not_has_pkg_test_package_alpha", "not_has_file_test_package_alpha" };
            "beta_ok" and => { #"pass_test_package_beta", "!fail_test_package_beta",
                               "not_has_pkg_test_package_beta", "not_has_file_test_package_beta" };

            "ok" and => { "charlie_ok", "alpha_ok", "beta_ok" };

    reports:
    
        ok::
        
            "$(this.promise_filename) Pass";
            
        !ok::
        
            "$(this.promise_filename) FAIL";
}

body classes succesfully_executed(class)
{
    kept_returncodes => { "0" };
    promise_kept => { "$(class)" };
}

